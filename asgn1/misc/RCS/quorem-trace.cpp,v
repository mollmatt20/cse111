head	1.27;
access;
symbols;
locks;
comment	@// @;


1.27
date	2022.01.18.05.11.06;	author -;	state -;
branches;
next	1.26;

1.26
date	2022.01.18.05.09.15;	author -;	state -;
branches;
next	1.25;

1.25
date	2022.01.18.05.08.22;	author -;	state -;
branches;
next	1.24;

1.24
date	2022.01.18.05.07.53;	author -;	state -;
branches;
next	1.23;

1.23
date	2022.01.18.04.49.20;	author -;	state -;
branches;
next	1.22;

1.22
date	2022.01.18.04.49.08;	author -;	state -;
branches;
next	1.21;

1.21
date	2022.01.18.04.48.13;	author -;	state -;
branches;
next	1.20;

1.20
date	2022.01.18.04.47.58;	author -;	state -;
branches;
next	1.19;

1.19
date	2022.01.18.04.47.20;	author -;	state -;
branches;
next	1.18;

1.18
date	2022.01.18.04.46.05;	author -;	state -;
branches;
next	1.17;

1.17
date	2022.01.18.04.45.42;	author -;	state -;
branches;
next	1.16;

1.16
date	2022.01.18.04.43.01;	author -;	state -;
branches;
next	1.15;

1.15
date	2022.01.18.04.42.39;	author -;	state -;
branches;
next	1.14;

1.14
date	2022.01.18.04.42.09;	author -;	state -;
branches;
next	1.13;

1.13
date	2022.01.17.06.41.20;	author -;	state -;
branches;
next	1.12;

1.12
date	2022.01.17.06.38.46;	author -;	state -;
branches;
next	1.11;

1.11
date	2022.01.17.06.36.44;	author -;	state -;
branches;
next	1.10;

1.10
date	2022.01.17.06.35.15;	author -;	state -;
branches;
next	1.9;

1.9
date	2022.01.17.06.34.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2022.01.17.06.34.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2022.01.17.06.31.10;	author -;	state -;
branches;
next	1.6;

1.6
date	2022.01.17.06.30.24;	author -;	state -;
branches;
next	1.5;

1.5
date	2022.01.17.06.29.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2022.01.17.06.28.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2022.01.17.06.28.38;	author -;	state -;
branches;
next	1.2;

1.2
date	2022.01.17.06.28.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2022.01.17.06.27.33;	author -;	state -;
branches;
next	;


desc
@@


1.27
log
@-
@
text
@// $Id: quorem-trace.cpp,v 1.26 2022-01-17 21:09:15-08 - - $

#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <libgen.h>
#include <vector>
using namespace std;

using ulong = unsigned long;
using uupair = pair<ulong,ulong>;
constexpr size_t fieldwidth = 15;

void trace_title (bool showquorem = true) {
   cout << setw (fieldwidth) << "divisor";
   cout << setw (fieldwidth) << "powerof2";
   if (showquorem) {
      cout << setw (fieldwidth) << "quotient";
      cout << setw (fieldwidth) << "remainder";
   }
   cout << endl;
}

void trace (ulong divisor, ulong powerof2,
            ulong quotient, ulong remainder, bool showquorem = true) {
   cout << setw (fieldwidth) << divisor;
   cout << setw (fieldwidth) << powerof2;
   if (showquorem) {
      cout << setw (fieldwidth) << quotient;
      cout << setw (fieldwidth) << remainder;
   }
   cout << endl;
}


uupair divide (ulong dividend, ulong divisor) {
   if (divisor == 0) throw domain_error ("divide(_,0)");
   ulong powerof2 = 1;
   trace_title (false);
   trace (divisor, powerof2, 0, 0, false);
   while (divisor < dividend) {
      divisor *= 2;
      powerof2 *= 2;
      trace (divisor, powerof2, 0, 0, false);
   }
   ulong quotient = 0;
   ulong remainder = dividend;
   trace_title();
   trace (divisor, powerof2, quotient, remainder);
   while (powerof2 > 0) {
      if (divisor <= remainder) {
         remainder -= divisor;
         quotient += powerof2;
      }
      divisor /= 2;
      powerof2 /= 2;
      trace (divisor, powerof2, quotient, remainder);
   }
   return uupair (quotient, remainder);
}


ostream& operator<< (ostream& out, const uupair& pair) {
   out << pair.first << " (rem " << pair.second << ")";
   return out;
}

int main (int argc, char** argv) {
   if (argc < 3) {
      cout << "Usage: " << basename (argv[0])
           << " dividend divisor ..." << endl;
   }else {
      for (int argi = 1; argi < argc - 1; argi += 2) {
         ulong dividend = atol (argv[argi]);
         ulong divisor = atol (argv[argi + 1]);
         cout << endl << "Evaluating: "
              << dividend << " / " << divisor << ":" << endl;
         try {
            uupair result = divide (dividend, divisor);
            cout << "Result: "
                 << dividend << " / " << divisor
                 << " = " << result << endl;
            uupair tested = uupair (dividend / divisor,
                                    dividend % divisor);
            if (tested != result) {
              cout << "........ wrong " << tested << endl;
            }
         }catch (domain_error& error) {
            cout << "........ domain_error: " << error.what() << endl;
         }
      }
   }
}

//TEST// ./quorem-trace  100 11 329 23 963 71 >quorem-trace.out1 2>&1
//TEST// ./quorem-trace  123 0 76543 123 >quorem-trace.out2 2>&1
//TEST// mkpspdf quorem-trace.ps quorem-trace.cpp quorem-trace.out?

@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.25 2022-01-17 21:08:22-08 - - $
d57 1
a57 1
      trace (dividend, divisor, powerof2, quotient, remainder);
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.24 2022-01-17 21:07:53-08 - - $
d71 1
a71 1
           << "dividend divisor ..." << endl;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.23 2022-01-17 20:49:20-08 - - $
d6 1
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.22 2022-01-17 20:49:08-08 - - $
d68 21
a88 14
   for (int argi = 1; argi < argc - 1; argi += 2) {
      ulong dividend = atol (argv[argi]);
      ulong divisor = atol (argv[argi + 1]);
      cout << endl << "Evaluating: "
           << dividend << " / " << divisor << ":" << endl;
      try {
         uupair result = divide (dividend, divisor);
         cout << "Result: "
              << dividend << " / " << divisor
              << " = " << result << endl;
         uupair tested = uupair (dividend / divisor,
                                 dividend % divisor);
         if (tested != result) {
           cout << "........ wrong " << tested << endl;
a89 2
      }catch (domain_error& error) {
         cout << "........ domain_error: " << error.what() << endl;
a91 1
   return EXIT_SUCCESS;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.21 2022-01-17 20:48:13-08 - - $
d39 1
a39 1
   trace (dividend, divisor, powerof2, 0, 0, false);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.13 2022-01-16 22:41:20-08 - - $
d11 1
a11 1
constexpr size_t fieldwidth = 11;
a13 1
   cout << setw (fieldwidth) << "dividend";
d23 1
a23 1
void trace (ulong dividend, ulong divisor, ulong powerof2,
a24 1
   cout << setw (fieldwidth) << dividend;
d43 1
a43 1
      trace (dividend, divisor, powerof2, 0, 0, false);
d48 1
a48 1
   trace (dividend, divisor, powerof2, quotient, remainder);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.12 2022-01-16 22:38:46-08 - - $
d65 1
a65 1
   out << pair.first << " (rem " << pair.second << ")"
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.18 2022-01-17 20:46:05-08 - - $
a5 1
#include <unistd.h>
d11 1
a11 1
size_t fieldwidth = 12;
d14 1
d24 1
a24 1
void trace (ulong divisor, ulong powerof2,
d26 1
d41 1
a41 1
   trace (divisor, powerof2, 0, 0, false);
d45 1
a45 1
      trace (divisor, powerof2, 0, 0, false);
d50 1
a50 1
   trace (divisor, powerof2, quotient, remainder);
d65 1
a65 1
   out << pair.first << " (rem " << pair.second << ")";
a68 8
void options (int argc, char** argv) {
   for (;;) {
      int opt = getopt (argc, argv, "w:");
      if (opt == 'w') fieldwidth = atol (optarg);
                 else return;
   }
}

d70 1
a70 2
   options (argc, argv);
   for (int argi = optind; argi < argc - 1; argi += 2) {
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.17 2022-01-17 20:45:42-08 - - $
d77 2
a78 1
   for (int argi = 1; argi < argc - 1; argi += 2) {
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.16 2022-01-17 20:43:01-08 - - $
d6 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.15 2022-01-17 20:42:39-08 - - $
d11 1
a11 1
constexpr size_t fieldwidth = 11;
d65 8
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.14 2022-01-17 20:42:09-08 - - $
d43 1
a43 1
      trace (dividend, divisor, powerof2, 0, 0, false);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.13 2022-01-16 22:41:20-08 - - $
d23 1
a23 1
void trace (ulong dividend, ulong divisor, ulong powerof2,
a24 1
   cout << setw (fieldwidth) << dividend;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.12 2022-01-16 22:38:46-08 - - $
a13 1
   cout << setw (fieldwidth) << "dividend";
d40 1
a40 1
   trace (dividend, divisor, powerof2, 0, 0, false);
d49 1
a49 1
   trace (dividend, divisor, powerof2, quotient, remainder);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.11 2022-01-16 22:36:44-08 - - $
d65 1
a65 1
   out << pair.first << " (rem " << pair.second << ")"
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.10 2022-01-16 22:35:15-08 - - $
d65 1
a65 1
   out << pair.first << " rem " << pair.second;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.9 2022-01-16 22:34:57-08 - - $
d11 1
d14 3
a16 3
   cout << setw(10) << "dividend";
   cout << setw(10) << "divisor";
   cout << setw(10) << "powerof2";
d18 2
a19 2
      cout << setw(10) << "quotient";
      cout << setw(10) << "remainder";
d26 3
a28 3
   cout << setw(10) << dividend;
   cout << setw(10) << divisor;
   cout << setw(10) << powerof2;
d30 2
a31 2
      cout << setw(10) << quotient;
      cout << setw(10) << remainder;
d36 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.8 2022-01-16 22:34:30-08 - - $
d14 2
a15 2
   cout << << setw(10) "divisor";
   cout << << setw(10) "powerof2";
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.7 2022-01-16 22:31:10-08 - - $
d13 3
a15 3
   cout << "dividend";
   cout << "divisor";
   cout << "powerof2";
d17 2
a18 2
      cout << "quotient";
      cout << "remainder";
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.6 2022-01-16 22:30:24-08 - - $
d13 7
a19 2
   cout << " dividend  divisor powerof2";
   if (showquorem) cout << " quotient remaindr";
d25 3
a27 3
   cout << setw(9) << dividend;
   cout << setw(9) << divisor;
   cout << setw(9) << powerof2;
d29 2
a30 2
      cout << setw(9) << quotient;
      cout << setw(9) << remainder;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.5 2022-01-16 22:29:19-08 - - $
d66 1
a66 1
      cout << endl << "quotient remainder  starting: "
d70 1
a70 1
         cout << "quotient remainder  finished: "
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.4 2022-01-16 22:28:56-08 - - $
d66 1
a66 1
      cout << endl << "Tracing starting: "
d70 1
a70 1
         cout << "Tracing finished: "
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.3 2022-01-16 22:28:38-08 - - $
d58 1
a58 1
   out << pair.first << " Rem " << pair.second;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.2 2022-01-16 22:28:09-08 - - $
d13 1
a13 1
   cout << " dividend  divisor powerof2" << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: quorem-trace.cpp,v 1.1 2022-01-16 22:27:33-08 - - $
d33 1
a33 1
   trace_title();
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: divrem-trace.cpp,v 1.7 2022-01-16 20:53:05-08 - - $
d14 1
a14 1
   if (showquorem) cout << " quotient remaindr" << endl;
@
