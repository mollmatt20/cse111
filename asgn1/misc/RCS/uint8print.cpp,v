head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2022.01.07.21.20.55;	author -;	state -;
branches;
next	1.5;

1.5
date	2022.01.07.21.20.11;	author -;	state -;
branches;
next	1.4;

1.4
date	2022.01.07.21.18.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2022.01.07.21.06.04;	author -;	state -;
branches;
next	1.2;

1.2
date	2022.01.07.20.58.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2022.01.07.20.53.47;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: uint8print.cpp,v 1.5 2022-01-07 13:20:11-08 - - $

// Show how to print a uint8_t as a number.
// Options:
// -c as characters
// -n as numbers

#include <iostream>
#include <memory>
#include <string>
#include <unordered_map>
using namespace std;

#ifdef __GNUG__

   #include <cxxabi.h>
   string demangle (const char* name) {
      int status = 0;
      unique_ptr<char,void(*)(void*)> result {
         abi::__cxa_demangle (name, nullptr, nullptr, &status),
         std::free,
      };
      return status == 0 ? result.get() : name; 
   }

#else

   string demangle (const char* name) {
      return name;
   }

#endif

string basename (const string &name) {
   return name.substr (name.rfind ('/') + 1);
}

template <typename T>
void print() {
   const char* type = typeid(T).name();
   cout << "Printing as " << type << " = " << demangle (type) << endl;
   cout << "[";
   for (uint8_t n = 0; n <= 9; ++n) cout << T(n);
   cout << "]" << endl;
}

unordered_map<string,void(*)()> fns {
   {"-8", print<uint8_t>},
   {"-i", print<int>},
   {"-u", print<unsigned>},
};

int main (int argc, char** argv) {
   string execname = basename (argv[0]);
   string opt = argc == 1 ? "" : argv[1];
   auto fn = fns.find (opt);
   if (argc != 2 or fn == fns.end()) {
      cerr << "Usage: " << execname << " -8|-i|-u" << endl;
      return EXIT_FAILURE;
   }
   fn->second();
   return EXIT_SUCCESS;
}

//TEST// for cmd in "uint8print -8" \
//TEST//            "uint8print -8 | cat -t" \
//TEST//            "uint8print -8 | od -c" \
//TEST//            "uint8print -i" \
//TEST//            "uint8print -u"
//TEST// do
//TEST//    echo ""
//TEST//    echo bash: $cmd
//TEST//    sh -c "$cmd"
//TEST// done >uint8print.out
//TEST// mkpspdf uint8print.ps uint8print.cpp uint8print.out

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: uint8print.cpp,v 1.4 2022-01-07 13:18:54-08 - - $
d69 1
a69 1
//TEST//            "uint8print -u" \
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: print-uint8.cpp,v 1.26 2022-01-07 13:16:36-08 - - $
d64 12
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: uint8print.cpp,v 1.2 2022-01-07 12:58:31-08 - - $
d11 1
a11 1
#include <vector>
d47 4
a50 4
vector<void(*)()> printers {
   print<uint8_t>,
   print<int>,
   print<unsigned>,
d53 10
a62 2
int main() {
   for (const auto& printer: printers) printer();
a63 10

//TEST// for cmd in "uint8print" \
//TEST//            "uint8print | cat -t" \
//TEST//            "uint8print | od -c"
//TEST// do
//TEST//    echo ""
//TEST//    echo bash: $cmd
//TEST//    sh -c "$cmd"
//TEST// done >uint8print.out
//TEST// mkpspdf uint8print.ps uint8print.cpp uint8print.out
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: uint8print.cpp,v 1.1 2022-01-07 12:53:47-08 - - $
d57 8
a64 1
//TEST// (uint8print | cat -t; uint8print | od -c) >uint8print.out 2>&1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: print-uint8.cpp,v 1.23 2022-01-07 12:47:57-08 - - $
d57 1
a57 1
//TEST// (uint8print | cat -v; uint8print | od -c) >uint8print.out 2>&1
@
