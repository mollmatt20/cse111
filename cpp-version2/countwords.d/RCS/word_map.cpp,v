head	1.20;
access;
symbols;
locks;
comment	@// @;


1.20
date	2022.03.27.19.31.06;	author -;	state -;
branches;
next	1.19;

1.19
date	2022.03.22.22.35.01;	author -;	state -;
branches;
next	1.18;

1.18
date	2022.03.22.22.27.01;	author -;	state -;
branches;
next	1.17;

1.17
date	2022.03.22.22.26.42;	author -;	state -;
branches;
next	1.16;

1.16
date	2022.03.22.22.06.08;	author -;	state -;
branches;
next	1.15;

1.15
date	2022.03.22.22.05.52;	author -;	state -;
branches;
next	1.14;

1.14
date	2022.03.22.22.05.17;	author -;	state -;
branches;
next	1.13;

1.13
date	2022.03.22.22.03.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2022.03.22.22.02.26;	author -;	state -;
branches;
next	1.11;

1.11
date	2022.03.22.21.46.50;	author -;	state -;
branches;
next	1.10;

1.10
date	2022.03.22.21.38.58;	author -;	state -;
branches;
next	1.9;

1.9
date	2022.03.22.21.37.28;	author -;	state -;
branches;
next	1.8;

1.8
date	2022.03.22.21.36.10;	author -;	state -;
branches;
next	1.7;

1.7
date	2022.03.22.21.34.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2022.03.22.21.31.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2022.03.22.21.30.50;	author -;	state -;
branches;
next	1.4;

1.4
date	2022.03.22.21.28.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2022.03.22.21.27.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2022.03.22.21.26.36;	author -;	state -;
branches;
next	1.1;

1.1
date	2022.03.22.21.24.43;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@// $Id: word_map.cpp,v 1.19 2022-03-22 15:35:01-07 - - $

#include <cctype>
#include <regex>
using namespace std;

#include "word_map.h"

string word_map::tolower (const string& line) {
   string lower {line};
   for (char& chr: lower) chr = ::tolower (chr);
   return lower;
}

void word_map::scan_line (const string& line) {
   static const regex word_rx {"[[:alpha:]]+"};
   for (auto itor = sregex_iterator (line.begin(), line.end(), word_rx);
        itor != sregex_iterator();
        ++itor) {
      ++words[tolower (itor->str())];
   }
}

void word_map::scan_file (istream& infile) {
   for (;;) {
      string line;
      getline (infile, line);
      if (infile.eof()) break;
      scan_line (line);
   }
}

@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.18 2022-03-22 15:27:01-07 - - $
a30 13
}

template <typename function>
void word_map::iterate (function fn) {
   for (const auto& pair: words) fn (pair);
}

word_map::const_iterator word_map::begin() const {
   return words.begin();
}

word_map::const_iterator word_map::end() const {
   return words.end();
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.17 2022-03-22 15:26:42-07 - - $
d38 1
a38 1
word_map::const_iterator begin() const {
d42 1
a42 1
word_map::const_iterator end() const {
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.16 2022-03-22 15:06:08-07 - - $
d38 1
a38 1
word:map::const_iterator begin() const {
d42 1
a42 1
word:map::const_iterator end() const {
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.15 2022-03-22 15:05:52-07 - - $
d36 8
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.14 2022-03-22 15:05:17-07 - - $
d34 1
a34 1
void iterate (function fn) {
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.13 2022-03-22 15:03:57-07 - - $
d33 1
a33 1
template <typename funcrion>
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.12 2022-03-22 15:02:26-07 - - $
d33 1
a33 1
template <typename funcion>
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.11 2022-03-22 14:46:50-07 - - $
d18 1
a18 1
        itor != wregex_iterator();
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.8 2022-03-22 14:36:10-07 - - $
d31 5
@


1.10
log
@-
@
text
@d9 1
a9 1
string word_map::to_lower (const string& line) {
d17 2
a18 2
   for (auto itor = regex_iterator (line.begin(), line.end(), word_rx);
        itor != regex_iterator();
d20 1
a20 1
      ++words[to_lower (itor->str())];
@


1.9
log
@-
@
text
@d17 2
a18 2
   for (auto itor = sregex_iterator (line.begin(), line.end(), word_rx);
        itor != sregex_iterator();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.6 2022-03-22 14:31:06-07 - - $
d3 1
d11 1
a11 1
   for (char& chr: lower) chr = ::to_lower (chr);
@


1.7
log
@-
@
text
@d8 1
a8 1
string to_lower (const string& line) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: word_map.cpp,v 1.1 2022-03-22 14:24:43-07 - - $
d16 2
a17 4
   string lower = to_lower (line);
   for (auto itor = regex_iterator (lower.begin(), lower.end(),
                                    word_rx);
        itor != regex_iterator();
d19 1
a19 1
      ++words[itor->str()];
@


1.5
log
@-
@
text
@d10 1
a10 1
   for (char& chr: lower) chr := ::to_lower (chr);
@


1.4
log
@-
@
text
@d10 1
a10 2
   for_each (lower.begin(), lower.end(),
             [](char& chr) { chr = ::to_lower (chr); });
@


1.3
log
@-
@
text
@d20 1
a20 1
        itor != sregex_iterator();
@


1.2
log
@-
@
text
@d16 1
a16 1
   static constexpr regex word_rx {"[[:alpha:]]+"};
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d11 1
a11 1
             [](char &chr) { chr = ::to_lower (chr); });
@
